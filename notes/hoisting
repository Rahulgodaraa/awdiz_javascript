Sure! Let's delve into hoisting in JavaScript with a detailed explanation.

### What is Hoisting?

**Hoisting** is a JavaScript mechanism where variable and function declarations are moved (or "hoisted") to the top of their containing scope during the compile phase before the code is executed. This means that you can use functions and variables before they are actually declared in the code.

### How Hoisting Works

1. **Variable Declarations**:
   - Only the declaration is hoisted, not the initialization.
   - Variables declared with `var` are hoisted to the top of their function scope or global scope if declared outside a function.
   - Variables declared with `let` and `const` are also hoisted, but they are not initialized and remain in a "temporal dead zone" until the declaration is encountered in the code.

2. **Function Declarations**:
   - Both the declaration and the function body are hoisted.
   - This allows functions to be called before they are declared in the code.

### Examples of Hoisting

#### Variable Hoisting with `var`

```javascript
console.log(x); // Output: undefined
var x = 5;
console.log(x); // Output: 5
```

**Explanation**:
- The variable declaration `var x;` is hoisted to the top, but the assignment `x = 5` is not.
- The code is interpreted as:
  ```javascript
  var x;
  console.log(x); // x is declared but not initialized, so it's undefined
  x = 5;
  console.log(x); // x is now 5
  ```

#### Variable Hoisting with `let` and `const`

```javascript
console.log(y); // ReferenceError: Cannot access 'y' before initialization
let y = 10;
console.log(y); // Output: 10
```

**Explanation**:
- The variable declaration `let y;` is hoisted, but it remains uninitialized until the actual line of code is executed.
- This results in a `ReferenceError` if you try to access the variable before its declaration.

#### Function Hoisting

```javascript
console.log(foo()); // Output: "Hello, World!"

function foo() {
  return "Hello, World!";
}
```

**Explanation**:
- The entire function declaration, including the body, is hoisted.
- The code is interpreted as:
  ```javascript
  function foo() {
    return "Hello, World!";
  }
  console.log(foo()); // foo is available and can be called
  ```

### Temporal Dead Zone (TDZ)

Variables declared with `let` and `const` are hoisted but not initialized, resulting in a temporal dead zone (TDZ) from the start of the block until the declaration is encountered.

```javascript
{
  console.log(z); // ReferenceError: Cannot access 'z' before initialization
  let z = 15;
  console.log(z); // Output: 15
}
```

**Explanation**:
- `let z;` is hoisted, but it remains in the TDZ until `z = 15` is executed.
- Accessing `z` before its declaration results in a `ReferenceError`.

### Function Expressions and Arrow Functions

Function expressions and arrow functions are not hoisted in the same way as function declarations. They follow the rules of variable hoisting.

```javascript
console.log(bar()); // TypeError: bar is not a function
var bar = function() {
  return "Hello!";
};
```

**Explanation**:
- The variable declaration `var bar;` is hoisted, but the assignment `bar = function() { ... }` is not.
- This results in a `TypeError` because `bar` is `undefined` when `bar()` is called.

### Summary

- **Hoisting** moves variable and function declarations to the top of their scope.
- Variables declared with `var` are initialized to `undefined`.
- Variables declared with `let` and `const` are hoisted but not initialized, resulting in a temporal dead zone.
- Function declarations are hoisted entirely, allowing them to be called before they appear in the code.
- Function expressions and arrow functions follow variable hoisting rules and are not fully hoisted.

Understanding hoisting helps avoid common pitfalls and ensures better control over variable and function scopes in JavaScript.